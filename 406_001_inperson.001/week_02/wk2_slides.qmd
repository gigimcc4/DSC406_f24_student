---
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/dsa.png
    theme: [default, css/index.scss]
    width: 1920
    height: 1080
    margin: 0.05
resources:
  - demo.pdf
---

<h1> Week 2 - August 27 </h1>

<h2> Exploratory Data Analysis for Big Data </h2>

<hr>

<h3> Jeanne McClure, Ph.D </h3>

<h3> DSC 406.001 </h3>
<br>

# https://go.ncsu.edu/dsa406_interest


## Announcements

  1) Did you complete all week 1 assignments? 
    (Survey, Assignment 1, getting connected to Posit Cloud)
  2) 6 Ways to get help
  3) Remember to read the complete the Homework Assignment 1 today
  

## At the end of today you will be able to:

::: incremental

- Describe different data types and data structures in R
- Create vectors, and dataframes in R
- Have completed or almost finished R primer.
- DS researcher will talk wiht you today about consent.

:::

# Questions???

## R Syntax

Similar to all languages, R syntax is composed of "parts of speech" that can be combined into sentences that express complex ideas: 

::: incremental
-   *Functions* are the verbs
	-   **mean**()
-   *Objects* are the nouns of the R language
	+   mean(**student_grades**)
-   *Arguments* are the adverbs or the direct object
	+   mean(student_grades, **na.rm = FALSE**)
-   As in any sentence, there is also “punctuation” or *operators*
  +   average_grade **<-** mean(student_grades, na.rm = FALSE)
  
:::
  
::: {.notes}

Functions: are everything you do in R. 

Say you want to take the mean of a number, you would write mean( )
Suppose you want to round a number, you would use round( ) and put the number inside the parentheses. Make sure to look in the console pane to see the answer.
- Functions always include parenthesis



Objects: are everything you have in R - things that you save like data frames in tabular form. Think back when you have used excel and you had to save your spread sheet and name it. That is comparable to an object. 

To save something into an object we need to use the assignment operator <-.  The assignment operator is used for assignment operation. Operator that assigns a certain value to a variable and scope is within the function and outside as well. 

Arguments: are the details that modify or refine what a function does. They are like adverbs in a sentence that describe how the action should be performed. For example, when calculating the mean, you might want to specify whether to include or exclude missing values. In the function mean(), the argument na.rm = FALSE tells R not to remove missing values (NA) before calculating the mean.

Arguments are typically placed within the parentheses of a function, separated by commas if there are multiple arguments.
It's important to specify the correct arguments to get the desired outcome from a function.
Operators: are symbols that perform operations on variables and values. The most common operator in R is the assignment operator <-, which assigns a value to a variable.

Think of operators as the punctuation marks in R—they connect and organize the different parts of your code to form a complete "sentence."
For example, the assignment operator <- is used to save the result of a function to an object: average_grade <- mean(student_grades, na.rm = FALSE).
Other operators include arithmetic operators like +, -, *, and /, which are used to perform mathematical operations, and logical operators like ==, !=, <, >, &&, and || that are used in conditional statements.
Understanding these basic components—functions, objects, arguments, and operators—will help you write clear and effective R code.
:::
  
## More on object and operators?

::::: panel-tabset

### Object

A object is a letter or word which takes (or contains) a value. We use the assignment 'operator', `<-` to create a variable and store some value in it.


```{r}
#| echo: true

# assign a single varibale to an object
x <- c("hello world")

```

:::{.notes}

As we mentioned in the previous message objects are everything in R. It can be a letter or a word that contains a value, string, integer etc. The punctions that we use it the assignment operator.


:::
### Arithmetic
:::: {.columns}

::: {.column width="45%" style="font-size: 50px" }

R is a calculator!
  
Type this in your console:  
```{r, echo = TRUE, eval = FALSE}
2 + 3
```
  
You'll get this: 
```{r, echo = FALSE}
2 + 3
```

:::


::: {.column width="45%"}

Arithmetic Operators 

<img src="img/arithmetic.png" height="350px"/>
:::

::::

:::{.notes}

Arithmetic: R can be used as a powerful calculator to perform a variety of arithmetic operations. When you type an arithmetic expression in the console, R will evaluate it and return the result.

Basic Arithmetic Operators:

+ : Addition (e.g., 2 + 3)
- : Subtraction (e.g., 5 - 2)
* : Multiplication (e.g., 4 * 3)
/ : Division (e.g., 10 / 2)
^ : Exponentiation (e.g., 2^3 for 2 to the power of 3)
%% : Modulus (remainder after division, e.g., 5 %% 2 gives 1)
%/% : Integer Division (e.g., 5 %/% 2 gives 2, the integer part of the division)

Order of Operations: R follows the standard mathematical order of operations (PEMDAS: Parentheses, Exponents, Multiplication and Division (left to right), Addition and Subtraction (left to right)).

For example: 2 + 3 * 4 will be calculated as 2 + (3 * 4) = 2 + 12 = 14.
You can use parentheses to explicitly define the order: (2 + 3) * 4 = 5 * 4 = 20.
Working with Variables: You can store the result of an arithmetic operation in a variable using the assignment operator <-.

Example: result <- 2 + 3 will store the value 5 in the variable result.
Practical Tip: Try out different arithmetic operations in the console to see how they work, and experiment with using variables to store and reuse your calculations.


:::

### Logic

:::: {.columns}

::: {.column width="45%" style="font-size: 50px" }
R is logical! 
  
What happens when you run this?  
```{r, echo=TRUE, eval = FALSE}
5 > 3
```
  
Or this?
```{r, echo=TRUE, eval = FALSE}
5 == 3
```

Why not just a single `=` operator?

:::



::: {.column width="45%"}

Logical Operators 

<img src="img/logical.png" height="550px"/>

:::
::::

:::{.notes}

What happens when you run this?

{r,
Copy code
5 > 3
You'll get TRUE because 5 is indeed greater than 3.

Or this?

{r,
Copy code
5 == 3
You'll get FALSE because 5 is not equal to 3.

Why not just a single = operator?
In R, the == operator is used for comparison, checking if two values are equal. A single = is used for assignment in some contexts, but it’s recommended to use <- for assignment to avoid confusion. Using = for comparison is not valid in R, which is why == is necessary for logical comparisons.

Logical operators in R help you make comparisons and combine conditions:

Greater than (e.g., 5 > 3 returns TRUE)
< Less than (e.g., 5 < 3 returns FALSE)
 Greater than or equal to (e.g., 5 >= 3 returns TRUE)
<= : Less than or equal to (e.g., 3 <= 3 returns TRUE)
== : Equal to (e.g., 5 == 5 returns TRUE)
!= : Not equal to (e.g., 5 != 3 returns TRUE)
& : Logical AND (e.g., TRUE & FALSE returns FALSE)
| : Logical OR (e.g., TRUE | FALSE returns TRUE)
! : Logical NOT (e.g., !TRUE returns FALSE)
These operators are essential when filtering data, setting conditions in loops, or when making decisions within your code. Practicing with these will enhance your ability to perform logical operations and understand complex conditions in R.

:::

### Assignment
:::: {.columns}

::: {.column width="45%" style="font-size: 50px" }

**Bad Form**

```{r, echo=TRUE}
my_variable = 2 + 3 

my_variable
```

:::



::: {.column width="45%"}

**Good Form**

```{r, echo=TRUE}
my_cat <- "Muffins"

my_cat
```

:::
::::

### Pipes ....for chaining

:::: {.columns}

::: {.column width="45%" style="font-size: 50px" }

**{magrittr} pipe**

`%>%` pipe is part of the "tidyverse" package

```{r}
library(tidyverse)
```


```{r, echo=TRUE}
cars %>% # think of the  pipe as saying "then"
  filter(speed > 15) %>%
  summarize(average_distance = mean(dist))
```

:::



::: {.column width="45%"}

<br/>

**R pipe**

```{r, echo=TRUE}
cars |> # think of the  pipe as saying "then"
  subset(speed > 15) |>
  mean(dist)
```

:::
::::


:::::

:::{.notes}

magrittr pipe (%>%):

filter(speed > 15): Filters rows where the speed is greater than 15.
summarize(average_distance = mean(dist)): Calculates the average stopping distance (dist) for the filtered rows.

Base R pipe (|>):
R now provides a simple native forward pipe syntax |>
subset(speed > 15): Similar to filter, it selects rows where speed is greater than 15.
mean(dist): This uses an anonymous function to calculate the mean of the dist column from the filtered data.

:::

:::{.notes}

The %>% operator, known as the pipe, is an essential tool in the "tidyverse" package. It allows you to chain multiple functions together in a way that reads more naturally, almost like a series of steps or instructions.

To use the pipe, you'll first need to load the "tidyverse" package:

{r}
Copy code
library(tidyverse)
Example Using %>% Pipe
{r,
Copy code
cars %>% 
  filter(speed > 15) %>%   # think of the pipe as saying "then"
  summarize(average_distance = mean(dist))
In this example:

The cars dataset is first filtered to include only rows where the speed is greater than 15.
Then, the summarize() function is applied to calculate the average_distance by taking the mean of the dist column.
The pipe makes it easy to read the sequence of operations as a series of "then" statements.

Why Use the Pipe?
Readability: The pipe improves the readability of your code by allowing you to write functions in a linear, step-by-step manner.
Efficiency: It avoids the need for nested functions, making your code cleaner and easier to debug.
Base R Pipe (|>)
R also has a native pipe operator |>, introduced in recent versions, which provides similar functionality without the need for additional packages:

{r,
Copy code
cars |> 
  subset(speed > 15) |>   # think of the pipe as saying "then"
  mean(dist)
In this example:

The subset() function is used to filter rows where the speed is greater than 15.
Then, the mean() function is used to calculate the mean of the dist column.
Differences Between %>% and |>
Package Dependency: %>% is part of the "tidyverse" package, so you'll need to load it using library(tidyverse). On the other hand, |> is a base R feature and does not require any additional packages.
Syntax: While they serve similar purposes, there may be slight differences in how functions are written, especially when dealing with anonymous functions or when passing arguments.
Choosing between %>% and |> often depends on your coding environment and whether you're using "tidyverse" functions. Both pipes can help make your code more streamlined and easier to follow.




:::


## What are the types of "vector"?

::: panel-tabset

### Vector

::: incremental

-   A vector in R is a one dimensional object that holds components of the same type.
-   A vector contains values that are homogeneous primitive elements.  
-   A vector is substantially a list of variables, and the simplest data structure in R.
-   Use the `c()` function. The c() function in R is used to combine or concatenate its argument.

:::

### Numeric

```{r}
numeric_vector <-c(1234, 2345, 5678)
```


```{r}
#| echo: true
#| eval: false

#create a numeric vector name the object numeric_vector
#
#


```


### Character

A character vector is a string it always is enclosed with "paranthesis"

```{r}
character_vector <-c("dog", "cat", "bear")
```


```{r}
#| echo: true
#| eval: false

#create a character vector name the object character_vector
#
#


```

:::{.notes}

Definition: A vector in R is a one-dimensional object that holds components of the same type. This means all the elements in a vector must be of the same data type, such as numeric, character, or logical.

Homogeneous Elements: A vector contains values that are homogeneous primitive elements, meaning every element within the vector shares the same type (e.g., all numbers or all strings).

Basic Data Structure: A vector is essentially a list of variables and is considered the simplest data structure in R. It is a fundamental building block for more complex data structures like matrices, data frames, and lists.

Creating Vectors with c() Function:

The c() function in R is used to combine or concatenate its arguments into a vector.
Example: To create a numeric vector containing the values 1, 2, and 3, you would use c(1, 2, 3).

:::

### Logical

TRUE and FALSE only
```{r}
#| echo: true

#create a logical vector
logical_vector <- c(TRUE, FALSE, TRUE, FALSE, TRUE)

#inspect the data
logical_vector
```

:::{.notes}

In R, a logical vector is a one-dimensional array that can hold only TRUE or FALSE values. These values represent Boolean logic, which is essential for conditional operations and decision-making in R.

The c() function is used here to create a vector consisting solely of TRUE and FALSE values.
When you run the logical_vector command, R will display the contents of the vector, showing the sequence of TRUE and FALSE values.

Conditional Statements: Logical vectors are often used in conditional statements or for filtering data. For example, you might use a logical vector to subset data or to check if certain conditions are met within your dataset.

Operations on Logical Vectors:

Logical vectors can be combined with logical operators (&, |, !) to create more complex conditions.
Example: logical_vector & c(TRUE, TRUE, FALSE, FALSE, TRUE) would return a new logical vector resulting from the element-wise AND operation.
Inspecting Logical Vectors: It’s always a good idea to inspect your logical vectors to ensure they contain the expected TRUE and FALSE values, as this will affect how your subsequent code behaves.

:::

### Function to identify vectors

We can confirm the vector by calling the class() function and passing the vector as input, i.e.,

```{r}
#| echo: true

class(character_vector)

```


....you try to confirm the numeric vector we created

```{r}
#| echo: true
#
#

```

:::

## Dataframes

In R, dataframes are very flexible. This is often the most convenient structure to work with a dataset.

You can combine the numeric and character vectors into a data frame in R using the data.frame() function. 

How do you think we do it?

<br/>

:::: {.columns}

::: {.column width="45%"}

```{r}
#| echo: true
#
#
```
:::

::: {.column width="45%"}
Answer **👉  **⤵**

::: {style="font-size: 50px"}
::: fragment
```{r echo=TRUE}
# Load tidyverse package 

df <- data.frame(Numbers = numeric_vector, Animals = character_vector)
df

```
:::
:::
:::

::::

:::{.notes}

In R, dataframes are an incredibly flexible way to organize and manipulate data, making them a preferred structure for working with datasets. You can easily combine different types of vectors, such as numeric and character vectors, into a single dataframe using the data.frame() function.

## Packages

:::: panel-tabset

Finally lets talk a little bit about packages

### Install Pacakges

- First time using a package use `install.packages("")`
- Do this ONLY ONCE in the "console"
- Notice that you use "parenthesis" in the function

:::{style="font-size: 50px"}
```{r eval = FALSE, echo=TRUE, message = FALSE, warning=FALSE}

# Install Packages
install.packages("tidyverse")


```
:::

:::{.notes}

In R, a package is essentially a collection of functions, data sets, and documentation that expands R's capabilities. These packages are stored in repositories like CRAN and can include everything from utilities for advanced statistical techniques to tools for plotting complex graphics. Each package comes complete with its own documentation to help users understand and implement its features effectively. By installing and loading these packages into an R session, users can leverage specialized functions and datasets tailored to their specific needs, enhancing the flexibility and power of their R programming environment.

:::

### Load package

- IN the script, **every time** use the function `library()` to call the package

::: {style="font-size: 50px"}
```{r echo=TRUE}
# Load tidyverse package 
#
#

```
:::

::::


## What's next?

::: incremental

-   For the rest of class work in groups to complete the R Primer.
-   Turn the document into Moodle when you are done. Follow the directions in Moodle. Due by 5PM on Tuesday (Sept 3)
-   For next week, Please add Github Educator and Copilot to the Posit site we are working in, see documents in Moodle.
-   Practice coding 10 minutes a day!

-   That's all! 😀

:::

